<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:jdbc="http://www.springframework.org/schema/jdbc"  
	xmlns:jee="http://www.springframework.org/schema/jee" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
		http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd"
	default-lazy-init="true">
     
	<description>Spring + activemq Configuration create by olddoor</description>
	
    <!-- 加载配置属性文件 -->
	<context:property-placeholder ignore-unresolvable="true" location="classpath*:conf/config.properties" />
	
	<context:annotation-config />
	
	<!-- 使用Annotation自动注册Bean，解决事物失效问题：在spring主容器中不扫描@Controller注解.
	而在SpringMvc中只扫描@Controller注解。  -->
	<!--<context:component-scan base-package="com.funoMq.mq">--><!-- base-package 如果多个，用“,”分隔 -->
	<!--	<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
	</context:component-scan>-->

	<bean id="consumerServiceImpl" class="com.funoMq.mq.service.impl.ConsumerServiceImpl"/>
	<bean id="producerServiceImpl" class="com.funoMq.mq.service.impl.ProducerServiceImpl"/>
	
	<!-- 配置JMS连接工厂OptimizeAcknowledge -->
	<bean id="connectionFactory" class="org.apache.activemq.ActiveMQConnectionFactory">
		<property name="brokerURL" value="${borkers_url}"/>
		<!-- 自动应答策略下, 开启ack优化选项 -->
		<property name="optimizeAcknowledge" value="${optimizeAcknowledge}" />
		<!-- ack信息最大发送周期(毫秒) -->
		<property name="optimizeAcknowledgeTimeOut" value="${optimizeAcknowledgeTimeOut}" />
		<!-- 是否异步发送消息 --> 
		<property name="useAsyncSend" value="true" />  
	</bean>
	
	<!-- 加载策略 -->
	<bean id="prefetchPolicy" class="org.apache.activemq.ActiveMQPrefetchPolicy">
		<!-- 指定queue消费者的预取限制  [有待测试效果]-->
		<property name="queuePrefetch" value="1" />
	</bean>
	
    <bean id="redeliveryPolicy" class="org.apache.activemq.RedeliveryPolicy">
        <property name="maximumRedeliveries" value="2" />
    </bean>
	
	<!-- ActiveMQ连接池配置,SpingJMS实现 -->
	<bean id="cachingConnectionFactory" class="org.springframework.jms.connection.CachingConnectionFactory">
		<property name="targetConnectionFactory" ref="connectionFactory" />
		<!-- Session缓存数量,这里属性也可以直接在这里配置 -->
		<property name="sessionCacheSize" value="${sessionCacheSize}" />
	</bean> 
	
	<!-- ActiveMQ连接池配置,ActiveMQ实现 -->
	<!-- 
	<bean id="pooledConnectionFactory" class="org.apache.activemq.pool.PooledConnectionFactory" 
		destroy-method="stop"> <property name="connectionFactory" ref="connectionFactory"/> 
	</bean> 
	-->
	
	<!-- 默认消息队列（Queue） -->
	<bean id="queueDestination" class="org.apache.activemq.command.ActiveMQQueue">
		<constructor-arg>
			<value>${defaultQueueDestination}</value>
		</constructor-arg>
	</bean>
	<!-- 消息队列2（Queue） 
	<bean id="queueDestination2" class="org.apache.activemq.command.ActiveMQQueue">
		<constructor-arg>
			<value>funo-queue</value>
		</constructor-arg>
	</bean>-->
	
	<!-- 动态destination并非jms规范. 相关destination的创建后已经形成. 如需动态destination具体需中间件提供 -->
	<!-- 配置JMS模板（Queue），Spring提供的JMS工具类，它发送、接收消息。
		 Default settings for JMS Sessions are "not transacted" and "auto-acknowledge默认我们使用这个配置". 
	 -->
	<bean id="queueJmsTemplate" class="org.springframework.jms.core.JmsTemplate">
		<property name="connectionFactory" ref="connectionFactory" />
		<property name="defaultDestination" ref="queueDestination" />
		<!--<property name="destinationResolver" ref="my_jmsDynamicDestination" />-->
		<!-- 设置超时时长 --> 
		<property name="receiveTimeout" value="${queueJmsTemplate_receiveTimeout}" />
		
		<!-- deliveryMode, priority, timeToLive 的开关，要生效，必须配置为true，默认false--> 
		<property name="explicitQosEnabled" value="false" />
		<!-- 发送模式  DeliveryMode.NON_PERSISTENT=1:非持久 ; DeliveryMode.PERSISTENT=2:持久 (默认)  
		<property name="deliveryMode" value="1" />-->
		
		<!-- 消息应答方式  
        Session.AUTO_ACKNOWLEDGE  消息自动签收  
        Session.CLIENT_ACKNOWLEDGE  客户端调用acknowledge方法手动签收  
        Session.DUPS_OK_ACKNOWLEDGE 不必必须签收，消息可能会重复发送  
        <property name="sessionAcknowledgeMode" value="1" /> -->  
	</bean>
	
	<!-- A dynamic resolver 相对jndi destinationResolver来说的.DynamicDestinationResolver应该是默认的配置可以不配到JmsTemplate中
	 这样发送信息的时候可以直接发送(destinationName,massage) 由jms自动创建destination
	<bean id="my_jmsDynamicDestination"
		class="org.springframework.jms.support.destination.DynamicDestinationResolver" />
	 -->
	 
	 
	<!-- =====================开始配置监听器  begin==================================================-->
	<!-- 配置消息队列监听者（Queue），代码下面给出，只有一个onMessage方法  -->
	<bean id="queueMessageListener" class="com.funoMq.mq.listener.QueueMessageListener" />
	
	<!-- 注意: web端调用时,需注释监听器的配置
		 动态监听操作中难以实现, 如有需求可考虑才采用同一个队列订阅,使用消息选择器的策略区分 note by olddoor -->
	<!-- 消息监听容器（Queue），配置连接工厂，监听的队列是queueDestination，监听器是上面定义的监听器  -->
	<!-- 1官方建议使用CachingConnectionFactory的情况下不要使用动态线程.无论是设置concurrency 
		   还是设置concurrentConsumers配合maxConcurrentConsumers.最好由listener container自行管理
		 2官方建议使用单独的本地的Connection.
		 3同样官方建议最好使用事务.-->
	<bean id="jmsContainer" class="org.springframework.jms.listener.DefaultMessageListenerContainer">
		<property name="connectionFactory" ref="connectionFactory" />
		<property name="destination" ref="queueDestination" />
		<property name="messageListener" ref="queueMessageListener" />  <!--queueMessageListener  queueAdapterMessageListener-->
		<!-- 静态设置固定的并发线程数 ,默认是1. 动态设置可考虑使用maxConcurrentConsumers.如使用topic队列的时候需要注意 出现消息被重复消费的情况  
 		  <property name="concurrentConsumers" value="${jmsC1_Consumers}"></property> -->
    	<!-- 设置最大的线程数 
    	<property name="maxConcurrentConsumers" value="${jmsC1_max}"></property> -->
    	<!-- 设置动态的线程数   
    	<property name="concurrency" value="${jmsC1_concurrency}"></property>  -->
	</bean>
	<!-- =====================开始配置监听器  end======================================================-->

	<!-- =====================消息监听适配器  begin===================================== -->
		<!-- 将接收到的消息进行类型转换，然后通过反射的形式把它交给一个普通的Java类进行处理.如果交给消息监听器需要为它指定这样一个目标类 -->
		<!-- 消息监听适配器
		<bean id="queueAdapterMessageListener"
			class="org.springframework.jms.listener.adapter.MessageListenerAdapter">
			<constructor-arg>
				<bean id="messageDelegateBean" class="com.funo.mq.listener.MessageDelegateBean" />
			</constructor-arg>
		</bean>  
		 -->
	<!-- =====================消息监听适配器  end =====================================  -->
	 
</beans>

