<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:jdbc="http://www.springframework.org/schema/jdbc"  
	xmlns:jee="http://www.springframework.org/schema/jee" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
		http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd"
	default-lazy-init="true">
     
	<description>Spring + activemq Configuration create by olddoor</description>
	
    <!-- 加载配置属性文件 -->
	<context:property-placeholder ignore-unresolvable="true" location="classpath*:/config.properties" />
	
	<context:annotation-config />
	
	<!-- 使用Annotation自动注册Bean，解决事物失效问题：在spring主容器中不扫描@Controller注解.
	而在SpringMvc中只扫描@Controller注解。  -->
	<context:component-scan base-package="com.funo.mq"><!-- base-package 如果多个，用“,”分隔 -->
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
	</context:component-scan>

	
	<!-- 配置JMS连接工厂 -->
	<bean id="connectionFactory" class="org.apache.activemq.ActiveMQConnectionFactory">
		<property name="brokerURL" value="${borkers_url}"/>
	</bean>
	
	<!-- ActiveMQ连接池配置,SpingJMS实现 -->
	<bean id="cachingConnectionFactory" class="org.springframework.jms.connection.CachingConnectionFactory">
		<property name="targetConnectionFactory" ref="connectionFactory" />
		<!-- Session缓存数量,这里属性也可以直接在这里配置 -->
		<property name="sessionCacheSize" value="100" />
	</bean> 
	
	<!-- ActiveMQ连接池配置,ActiveMQ实现 -->
	<!-- 
	<bean id="pooledConnectionFactory" class="org.apache.activemq.pool.PooledConnectionFactory" 
		destroy-method="stop"> <property name="connectionFactory" ref="connectionFactory"/> 
	</bean> 
	-->
	
	<!-- 定义消息队列（Queue） -->
	<bean id="queueDestination" class="org.apache.activemq.command.ActiveMQQueue">
		<!-- 设置消息队列的名字 -->
		<constructor-arg>
			<value>cmcc-queue</value>
		</constructor-arg>
	</bean>
	<!-- 动态destination并非jms规范. 相关destination的创建后已经形成. 如需动态destination具体需中间件提供 -->
	<!-- 配置JMS模板（Queue），Spring提供的JMS工具类，它发送、接收消息。 -->
	<bean id="queueJmsTemplate" class="org.springframework.jms.core.JmsTemplate">
		<property name="connectionFactory" ref="connectionFactory" />
		<property name="defaultDestination" ref="queueDestination" />
		<!-- 设置超时时长 --> 
		<property name="receiveTimeout" value="10000" />
	</bean>
	
	<!--queue消息生产者 
	<bean id="producerService" class="com.funo.mq.service.impl.ProducerServiceImpl">
		<property name="queueJmsTemplate" ref="queueJmsTemplate"></property>
	</bean>
	-->
	<!--queue消息消费者 
	<bean id="consumerService" class="com.funo.mq.service.impl.ConsumerServiceImpl">
		<property name="queueJmsTemplate" ref="queueJmsTemplate"></property>
	</bean>
	-->
	
	<!-- 配置消息队列监听者（Queue），代码下面给出，只有一个onMessage方法 -->
	<bean id="queueMessageListener" class="com.funo.mq.listener.QueueMessageListener" />
	
	<!-- 注意: web端调用时,需注释监听器的配置
		 动态监听操作中难以实现, 如有需求可考虑才采用同一个队列订阅,使用消息选择器的策略区分 note by olddoor -->
	<!-- 消息监听容器（Queue），配置连接工厂，监听的队列是queueDestination，监听器是上面定义的监听器 -->
	<bean id="jmsContainer" class="org.springframework.jms.listener.DefaultMessageListenerContainer">
		<property name="connectionFactory" ref="connectionFactory" />
		<property name="destination" ref="queueDestination" />
		<property name="messageListener" ref="queueMessageListener" />
		<!-- 设置固定的线程数   
    	<property name="concurrentConsumers" value="6"></property> -->
		<!-- 设置动态的线程数 -->  
    	<property name="concurrency" value="2-9"></property>
    	<!-- 设置最大的线程数 -->  
    	<property name="maxConcurrentConsumers" value="15"></property>
	</bean>

</beans>

